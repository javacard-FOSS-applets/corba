${interface.package}.applet;


import javacard.framework.APDU;
import javacard.framework.ISO7816;
import javacard.framework.ISOException;

/**
 * This class represent a class generated by the applet generator
 *	
 */
public class ${interface.simpleName}Applet extends javacard.framework.Applet {

	/**
	 * This applet is designed to respond to the following
	 * class of instructions.
	 */
	final static byte ${interface.simpleName}AppletCLA = (byte)${interface.appletCLA};
	//dataBuffer
	byte[] dataBuffer;
	
	//Instruction set for ${interface.simpleName}Applet
	<#list interface.getDeclaredMethods() as method>
	private final static byte ${method.name?upper_case} = 0x${interface.instructionsNumber[method_index]};
	</#list>
	
	//TODO : déclarer ici les attributs de la classe
	
	/**
	 * Constructor for the applet
	 * @param buffer buffer
	 * @param offset offset
	 * @param length length
	 */
	private ${interface.simpleName}Applet(byte buffer[],short offset,byte length) {
		
		//TODO : instancier les attributs de l'applet
		
		if (buffer[offset] == (byte)0) {
			register();
		}
		else {
			register(buffer, (short)(offset+1) ,(byte)(buffer[offset]));
		}
	}

	//  Every applet running JavaCard 2.0 must implement the following
	//  three functions.
	
	/**
	 *  You create the one instance of your applet here.
	 */ 
	public static void install(byte buffer[],short offset,byte length) {
		new ${interface.simpleName}Applet(buffer, offset, length);
	}

	/**
	 *  This function is called when your applet is selected.
	 */ 
	public boolean select() {
		return true;
	}

	/**
	 *  The process method dispatches messages to your class methods
	 *  depending on the instruction type.
	 */
	public void process(APDU apdu) throws ISOException{

		byte buffer[] = apdu.getBuffer();

        // Implement a select handler 
        if (selectingApplet()) {
            ISOException.throwIt(ISO7816.SW_NO_ERROR);
		}
		
		if (buffer[ISO7816.OFFSET_CLA] != ${interface.simpleName}AppletCLA) 
				ISOException.throwIt(ISO7816.SW_CLA_NOT_SUPPORTED);
    
        byte ins = buffer[ISO7816.OFFSET_INS];
        
		switch (ins) {
	<#list interface.getDeclaredMethods() as method>
		case ${method.name?upper_case} :
			${method.name}(apdu);
			break; 
	</#list>
		default:
			ISOException.throwIt(ISO7816.SW_INS_NOT_SUPPORTED);
		}
	}

	<#list interface.getDeclaredMethods() as method>
	private void ${method.name}(APDU apdu){
		//TODO : implémenter la méthode ici
	}
	</#list>
	
}
