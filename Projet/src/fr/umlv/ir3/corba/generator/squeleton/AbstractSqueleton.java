package fr.umlv.ir3.corba.generator.squeleton;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;

import fr.umlv.ir3.corba.generator.GeneratorInterface;

/**
 * 
 * @author olivier Boitel
 *
 */
public abstract class AbstractSqueleton 
{
	protected GeneratorInterface generatorInterface;
	protected String className;
	
	protected AbstractSqueleton(GeneratorInterface squeletonInterface) 
	{
		this.generatorInterface = squeletonInterface;
		this.className = getName();
	}
	
	/**
	 * this method set the squeleton class name
	 * @return the name of the class
	 */
	abstract public String getName();
	
	/**
	 * this method set the squeleton class name
	 * @return the name of the class
	 */
	abstract public String getPackage();
	
	
	/**
	 * this method generate the header of the class, this mean :
	 *  package
	 *  imports
	 *  class (ie : "public class MyClass {")
	 * @param code code already generated by others methods
	 */
	abstract protected void generateStartClass(StringBuilder code);
	
	/**
	 * This method is called for generating methods
	 * The implementation should used SqueletonInterface.getMethodIterator
	 * for generating each method
	 * @param code code already generated by others methods
	 */
	abstract protected void generateMethods(StringBuilder code);
	
	/**	
	 * Use to write end of class, generally this method will
	 * only write a close bracket
	 * @param code code already generated by others methods
	 */
	abstract protected void generateFinalize(StringBuilder code);
	
	/**
	 * Generate fields and constructor and other oneshot methods
	 * @param code code already generated by others methods
	 */
	protected abstract void generateInitialize(StringBuilder code);
	
	
	/**
	 * this method generate the squeleton of the class to create
	 * @return the stringbuilder containing headers of class
	 * @throws FileNotFoundException if the the path given in argument doesn't exist
	 */
	private final StringBuilder generateSqueleton()
	{
		StringBuilder code = new StringBuilder();
		
		generateStartClass(code);
		generateInitialize(code);
		generateMethods(code);
		generateFinalize(code);
		
		return code;
	}
	
	/**
	 * Generate file, this method call each function prefix by generate
	 * @param generatedSourcePath source path for the generated class
	 * @throws FileNotFoundException if some file couldn't be created
	 *
	 */
	public void generateFile(String generatedSourcePath) throws FileNotFoundException
	{
		//FIXME : compatibilité Windows !!!!
		String fileName = this.className+".java";
		//Création des répertoires si necessaire
		String path = generatedSourcePath + this.getPackage().replace(".", "/");
		if(new File(path).mkdirs())
		{
			throw new FileNotFoundException("Unable to create packages:" + path);
		}
		String fullPath = path + "/" + fileName;
		
		PrintWriter outFile = new PrintWriter(new File(fullPath));
		outFile.print(generateSqueleton().toString());
		outFile.close();
	}
	
	/**
	 * indent a string in the code of the class
	 * @param nbIndent the number of indentation
	 * @return the string indented
	 */
	protected String indent(int nbIndent)
	{
		String indent = "";
		for (int i = 0; i < nbIndent; i++) 
		{
			indent+="\t";
		}
		return indent;
	}
	
	/**
	 * 
	 * @param path
	 * @return
	 */
	public static String treatPath(String path)
	{	
		if(path.endsWith("/"))
			return path;
		else
			return path+"/";
	}
}
